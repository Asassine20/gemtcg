---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2'
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, buttonText, buttonLink, classes: itemClasses = {} }) => (
        <div
          class={twMerge(
            'relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          {/* Icon rendering */}
          {(icon || defaultIcon) && (
            <div class="w-12 h-12 mb-6 text-primary">
              <svg
                class="w-12 h-12"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                {/* Use `icon` or fallback to `defaultIcon` */}
                <use href={`/icons/tabler-sprite.svg#${icon || defaultIcon}`} />
              </svg>
            </div>
          )}

          {/* Title */}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>

          {/* Description */}
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}

          {/* Button Rendering */}
          {buttonText && buttonLink && (
            <div class="mt-4">
              <Button text={buttonText} href={buttonLink} />
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
